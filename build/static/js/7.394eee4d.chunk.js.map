{"version":3,"sources":["components/Auth/AuthForm.module.css","components/Auth/AuthForm.js","components/pages/AuthPage.js"],"names":["module","exports","AuthForm","history","useHistory","emailInputRef","useRef","passwordInputRef","authCtx","useContext","AuthContext","useState","isLogin","setIsLogin","isLoading","setIsLoading","invalid","setInvalid","className","classes","auth","onSubmit","event","preventDefault","url","enteredEmail","current","value","enteredPassword","trim","length","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","Error","login","idToken","replace","catch","err","alert","message","control","htmlFor","type","id","ref","actions","toggle","onClick","prevState","AuthPage"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,2B,iGC+GlHC,EA1GE,WACf,IAAMC,EAAUC,cACVC,EAAgBC,mBAChBC,EAAmBD,mBAEnBE,EAAUC,qBAAWC,KAE3B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAkEA,OACE,0BAASC,UAAWC,IAAQC,KAA5B,UACE,6BAAKR,EAAU,QAAU,YACzB,uBAAMS,SAhEY,SAACC,GACrBA,EAAMC,iBAEN,IAeIC,EAfEC,EAAepB,EAAcqB,QAAQC,MACrCC,EAAkBrB,EAAiBmB,QAAQC,MAEjD,OACiC,IAA/BF,EAAaI,OAAOC,QACc,IAAlCF,EAAgBC,OAAOC,OAEhBb,EAAW,4CAGhBW,EAAgBC,OAAOC,OAAS,EAC3Bb,EAAW,oCAGpBF,GAAa,GAGXS,EADEZ,EAEA,oHAGA,6GAEJmB,MAAMP,EAAK,CACTQ,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOX,EACPY,SAAUT,EACVU,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAEL,OADA1B,GAAa,GACT0B,EAAIC,GACCD,EAAIE,OAEJF,EAAIE,OAAOH,MAAK,SAACI,GAMtB,MAAM,IAAIC,MALS,gCASxBL,MAAK,SAACI,GACLpC,EAAQsC,MAAMF,EAAKG,SACnB5C,EAAQ6C,QAAQ,eAEjBC,OAAM,SAACC,GACNC,MAAMD,EAAIE,cAOZ,UACE,sBAAKlC,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQC,IAAKpD,OAEtC,sBAAKa,UAAWC,IAAQkC,QAAxB,UACE,uBAAOC,QAAQ,WAAf,sBACA,uBAAOC,KAAK,WAAWC,GAAG,WAAWC,IAAKlD,IACzCS,GAAW,4BAAIA,OAElB,sBAAKE,UAAWC,IAAQuC,QAAxB,WACI5C,GACA,iCAASF,EAAU,QAAU,mBAE9BE,GAAa,mDACd,wBACEyC,KAAK,SACLrC,UAAWC,IAAQwC,OACnBC,QAtFoB,WAC5B/C,GAAW,SAACgD,GAAD,OAAgBA,MAkFrB,SAKGjD,EAAU,qBAAuB,0CClG/BkD,UAJE,WACf,OAAO,cAAC,EAAD","file":"static/js/7.394eee4d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__1Yir_\",\"control\":\"AuthForm_control__1PPT8\",\"actions\":\"AuthForm_actions__JREhA\",\"toggle\":\"AuthForm_toggle__KRR3s\"};","import { useContext, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport AuthContext from \"../store/auth-context\";\n\nimport classes from \"./AuthForm.module.css\";\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const authCtx = useContext(AuthContext);\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [invalid, setInvalid] = useState(\"\");\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    if (\n      enteredEmail.trim().length === 0 ||\n      enteredPassword.trim().length === 0\n    ) {\n      return setInvalid(\"Please enter a valid email and password!\");\n    }\n\n    if (enteredPassword.trim().length < 7) {\n      return setInvalid(\"Please enter a 7 digit password\");\n    }\n\n    setIsLoading(true);\n    let url;\n    if (isLogin) {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCYoGhEjElS7Ydg9rtOo2TAF9EahWjtZU8\";\n    } else {\n      url =\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCYoGhEjElS7Ydg9rtOo2TAF9EahWjtZU8\";\n    }\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = \"Authentication failed!\";\n            // if (data && data.error && data.error.message) {\n            //   errorMessage = data.error.message;\n            // }\n\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        authCtx.login(data.idToken);\n        history.replace(\"/profile\");\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Email</label>\n          <input type=\"email\" id=\"email\" ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" id=\"password\" ref={passwordInputRef} />\n          {invalid && <p>{invalid}</p>}\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? \"Login\" : \"Create Account\"}</button>\n          )}\n          {isLoading && <p>Sending request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../Auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}